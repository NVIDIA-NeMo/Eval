# {py:mod}`nemo_eval.adapters.interceptors.logging_interceptor`

```{py:module} nemo_eval.adapters.interceptors.logging_interceptor
```

```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor
:parser: docs.autodoc2_docstrings_parser
:allowtitles:
```

## Module Contents

### Classes

````{list-table}
:class: autosummary longtable
:align: left

* - {py:obj}`RequestLoggingInterceptor <nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor>`
  - ```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor
    :parser: docs.autodoc2_docstrings_parser
    :summary:
    ```
* - {py:obj}`ResponseLoggingInterceptor <nemo_eval.adapters.interceptors.logging_interceptor.ResponseLoggingInterceptor>`
  - ```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor.ResponseLoggingInterceptor
    :parser: docs.autodoc2_docstrings_parser
    :summary:
    ```
````

### Functions

````{list-table}
:class: autosummary longtable
:align: left

* - {py:obj}`_get_safe_headers <nemo_eval.adapters.interceptors.logging_interceptor._get_safe_headers>`
  - ```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor._get_safe_headers
    :parser: docs.autodoc2_docstrings_parser
    :summary:
    ```
````

### API

````{py:function} _get_safe_headers(headers: dict[str, str]) -> dict[str, str]
:canonical: nemo_eval.adapters.interceptors.logging_interceptor._get_safe_headers

```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor._get_safe_headers
:parser: docs.autodoc2_docstrings_parser
```
````

`````{py:class} RequestLoggingInterceptor(max_requests: typing.Optional[int] = 5)
:canonical: nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor

Bases: {py:obj}`nemo_eval.adapters.interceptors.types.RequestInterceptor`

```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor
:parser: docs.autodoc2_docstrings_parser
```

```{rubric} Initialization
```

```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor.__init__
:parser: docs.autodoc2_docstrings_parser
```

````{py:attribute} _max_requests
:canonical: nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor._max_requests
:type: typing.Optional[int]
:value: >
   None

```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor._max_requests
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:attribute} _logged_requests
:canonical: nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor._logged_requests
:type: int
:value: >
   None

```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor._logged_requests
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:attribute} _lock
:canonical: nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor._lock
:type: threading.Lock
:value: >
   None

```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor._lock
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:method} _log_request(ar: nemo_eval.adapters.interceptors.types.AdapterRequest) -> None
:canonical: nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor._log_request

```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor._log_request
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:method} intercept_request(ar: nemo_eval.adapters.interceptors.types.AdapterRequest) -> nemo_eval.adapters.interceptors.types.AdapterRequest
:canonical: nemo_eval.adapters.interceptors.logging_interceptor.RequestLoggingInterceptor.intercept_request

````

`````

`````{py:class} ResponseLoggingInterceptor(max_responses: typing.Optional[int] = 5)
:canonical: nemo_eval.adapters.interceptors.logging_interceptor.ResponseLoggingInterceptor

Bases: {py:obj}`nemo_eval.adapters.interceptors.types.ResponseInterceptor`

```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor.ResponseLoggingInterceptor
:parser: docs.autodoc2_docstrings_parser
```

```{rubric} Initialization
```

```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor.ResponseLoggingInterceptor.__init__
:parser: docs.autodoc2_docstrings_parser
```

````{py:attribute} _max_responses
:canonical: nemo_eval.adapters.interceptors.logging_interceptor.ResponseLoggingInterceptor._max_responses
:type: typing.Optional[int]
:value: >
   None

```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor.ResponseLoggingInterceptor._max_responses
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:attribute} _logged_responses
:canonical: nemo_eval.adapters.interceptors.logging_interceptor.ResponseLoggingInterceptor._logged_responses
:type: int
:value: >
   None

```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor.ResponseLoggingInterceptor._logged_responses
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:attribute} _lock
:canonical: nemo_eval.adapters.interceptors.logging_interceptor.ResponseLoggingInterceptor._lock
:type: threading.Lock
:value: >
   None

```{autodoc2-docstring} nemo_eval.adapters.interceptors.logging_interceptor.ResponseLoggingInterceptor._lock
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:method} intercept_response(ar: nemo_eval.adapters.interceptors.types.AdapterResponse) -> nemo_eval.adapters.interceptors.types.AdapterResponse
:canonical: nemo_eval.adapters.interceptors.logging_interceptor.ResponseLoggingInterceptor.intercept_response

````

`````
