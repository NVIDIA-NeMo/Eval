# {py:mod}`nemo_eval.api`

```{py:module} nemo_eval.api
```

```{autodoc2-docstring} nemo_eval.api
:parser: docs.autodoc2_docstrings_parser
:allowtitles:
```

## Module Contents

### Functions

````{list-table}
:class: autosummary longtable
:align: left

* - {py:obj}`deploy <nemo_eval.api.deploy>`
  - ```{autodoc2-docstring} nemo_eval.api.deploy
    :parser: docs.autodoc2_docstrings_parser
    :summary:
    ```
* - {py:obj}`evaluate <nemo_eval.api.evaluate>`
  - ```{autodoc2-docstring} nemo_eval.api.evaluate
    :parser: docs.autodoc2_docstrings_parser
    :summary:
    ```
````

### Data

````{list-table}
:class: autosummary longtable
:align: left

* - {py:obj}`AnyPath <nemo_eval.api.AnyPath>`
  - ```{autodoc2-docstring} nemo_eval.api.AnyPath
    :parser: docs.autodoc2_docstrings_parser
    :summary:
    ```
* - {py:obj}`logger <nemo_eval.api.logger>`
  - ```{autodoc2-docstring} nemo_eval.api.logger
    :parser: docs.autodoc2_docstrings_parser
    :summary:
    ```
````

### API

````{py:data} AnyPath
:canonical: nemo_eval.api.AnyPath
:value: >
   None

```{autodoc2-docstring} nemo_eval.api.AnyPath
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:data} logger
:canonical: nemo_eval.api.logger
:value: >
   'getLogger(...)'

```{autodoc2-docstring} nemo_eval.api.logger
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:function} deploy(nemo_checkpoint: typing.Optional[nemo_eval.api.AnyPath] = None, serving_backend: str = 'pytriton', model_name: str = 'megatron_model', server_port: int = 8000, server_address: str = '0.0.0.0', fastapi_http_address: str = '0.0.0.0', fastapi_port: int = 8080, num_gpus: int = 1, num_nodes: int = 1, tensor_parallelism_size: int = 1, pipeline_parallelism_size: int = 1, context_parallel_size: int = 1, expert_model_parallel_size: int = 1, max_input_len: int = 4096, max_batch_size: int = 8, enable_flash_decode: bool = True, enable_cuda_graphs: bool = True, num_replicas: typing.Optional[int] = None, num_cpus_per_replica: typing.Optional[int] = None, include_dashboard: bool = True, cuda_visible_devices: str = '', legacy_ckpt: bool = False)
:canonical: nemo_eval.api.deploy

```{autodoc2-docstring} nemo_eval.api.deploy
:parser: docs.autodoc2_docstrings_parser
```
````

````{py:function} evaluate(target_cfg: nemo_eval.utils.api.EvaluationTarget, eval_cfg: nemo_eval.utils.api.EvaluationConfig = EvaluationConfig(type='gsm8k'), adapter_cfg: nemo_eval.utils.api.AdapterConfig | None = None) -> dict
:canonical: nemo_eval.api.evaluate

```{autodoc2-docstring} nemo_eval.api.evaluate
:parser: docs.autodoc2_docstrings_parser
```
````
