# {py:mod}`nemo_eval.utils.ray_deploy`

```{py:module} nemo_eval.utils.ray_deploy
```

```{autodoc2-docstring} nemo_eval.utils.ray_deploy
:parser: docs.autodoc2_docstrings_parser
:allowtitles:
```

## Module Contents

### Functions

````{list-table}
:class: autosummary longtable
:align: left

* - {py:obj}`get_available_cpus <nemo_eval.utils.ray_deploy.get_available_cpus>`
  - ```{autodoc2-docstring} nemo_eval.utils.ray_deploy.get_available_cpus
    :parser: docs.autodoc2_docstrings_parser
    :summary:
    ```
* - {py:obj}`signal_handler <nemo_eval.utils.ray_deploy.signal_handler>`
  - ```{autodoc2-docstring} nemo_eval.utils.ray_deploy.signal_handler
    :parser: docs.autodoc2_docstrings_parser
    :summary:
    ```
* - {py:obj}`deploy_with_ray <nemo_eval.utils.ray_deploy.deploy_with_ray>`
  - ```{autodoc2-docstring} nemo_eval.utils.ray_deploy.deploy_with_ray
    :parser: docs.autodoc2_docstrings_parser
    :summary:
    ```
````

### Data

````{list-table}
:class: autosummary longtable
:align: left

* - {py:obj}`logger <nemo_eval.utils.ray_deploy.logger>`
  - ```{autodoc2-docstring} nemo_eval.utils.ray_deploy.logger
    :parser: docs.autodoc2_docstrings_parser
    :summary:
    ```
````

### API

````{py:data} logger
:canonical: nemo_eval.utils.ray_deploy.logger
:value: >
   'getLogger(...)'

```{autodoc2-docstring} nemo_eval.utils.ray_deploy.logger
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:function} get_available_cpus() -> int
:canonical: nemo_eval.utils.ray_deploy.get_available_cpus

```{autodoc2-docstring} nemo_eval.utils.ray_deploy.get_available_cpus
:parser: docs.autodoc2_docstrings_parser
```
````

````{py:function} signal_handler(signum, frame, ray_deployer: nemo_deploy.deploy_ray.DeployRay)
:canonical: nemo_eval.utils.ray_deploy.signal_handler

```{autodoc2-docstring} nemo_eval.utils.ray_deploy.signal_handler
:parser: docs.autodoc2_docstrings_parser
```
````

````{py:function} deploy_with_ray(nemo_checkpoint: str, num_gpus: int, num_nodes: int, tensor_model_parallel_size: int, pipeline_model_parallel_size: int, context_parallel_size: int, expert_model_parallel_size: int, num_replicas: int, num_cpus_per_replica: typing.Optional[int] = None, host: str = '0.0.0.0', port: int = 8000, model_id: str = 'megatron_model', enable_cuda_graphs: bool = False, enable_flash_decode: bool = True, legacy_ckpt: bool = False, include_dashboard: bool = True, cuda_visible_devices: str = '') -> None
:canonical: nemo_eval.utils.ray_deploy.deploy_with_ray

```{autodoc2-docstring} nemo_eval.utils.ray_deploy.deploy_with_ray
:parser: docs.autodoc2_docstrings_parser
```
````
