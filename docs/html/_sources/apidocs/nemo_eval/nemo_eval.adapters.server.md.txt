# {py:mod}`nemo_eval.adapters.server`

```{py:module} nemo_eval.adapters.server
```

```{autodoc2-docstring} nemo_eval.adapters.server
:parser: docs.autodoc2_docstrings_parser
:allowtitles:
```

## Module Contents

### Classes

````{list-table}
:class: autosummary longtable
:align: left

* - {py:obj}`_AdapterServer <nemo_eval.adapters.server._AdapterServer>`
  - ```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer
    :parser: docs.autodoc2_docstrings_parser
    :summary:
    ```
````

### Functions

````{list-table}
:class: autosummary longtable
:align: left

* - {py:obj}`create_server_process <nemo_eval.adapters.server.create_server_process>`
  - ```{autodoc2-docstring} nemo_eval.adapters.server.create_server_process
    :parser: docs.autodoc2_docstrings_parser
    :summary:
    ```
````

### API

````{py:function} create_server_process(adapter_config: nemo_eval.api.AdapterConfig) -> typing.Tuple[multiprocessing.Process, nemo_eval.api.AdapterConfig]
:canonical: nemo_eval.adapters.server.create_server_process

```{autodoc2-docstring} nemo_eval.adapters.server.create_server_process
:parser: docs.autodoc2_docstrings_parser
```
````

`````{py:class} _AdapterServer(adapter_config: nemo_eval.api.AdapterConfig)
:canonical: nemo_eval.adapters.server._AdapterServer

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer
:parser: docs.autodoc2_docstrings_parser
```

```{rubric} Initialization
```

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer.__init__
:parser: docs.autodoc2_docstrings_parser
```

````{py:attribute} adapter_host
:canonical: nemo_eval.adapters.server._AdapterServer.adapter_host
:type: str
:value: >
   None

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer.adapter_host
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:attribute} adapter_port
:canonical: nemo_eval.adapters.server._AdapterServer.adapter_port
:type: int
:value: >
   None

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer.adapter_port
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:attribute} request_interceptors
:canonical: nemo_eval.adapters.server._AdapterServer.request_interceptors
:type: list[nemo_eval.adapters.interceptors.RequestInterceptor]
:value: >
   None

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer.request_interceptors
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:attribute} response_interceptors
:canonical: nemo_eval.adapters.server._AdapterServer.response_interceptors
:type: list[nemo_eval.adapters.interceptors.ResponseInterceptor]
:value: >
   None

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer.response_interceptors
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:attribute} app
:canonical: nemo_eval.adapters.server._AdapterServer.app
:type: flask.Flask
:value: >
   None

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer.app
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:attribute} api_url
:canonical: nemo_eval.adapters.server._AdapterServer.api_url
:type: str
:value: >
   None

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer.api_url
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:method} _build_interceptor_chains(use_reasoning: bool, end_reasoning_token: str, custom_system_prompt: typing.Optional[str], max_logged_requests: typing.Optional[int], max_logged_responses: typing.Optional[int])
:canonical: nemo_eval.adapters.server._AdapterServer._build_interceptor_chains

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer._build_interceptor_chains
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:method} run() -> None
:canonical: nemo_eval.adapters.server._AdapterServer.run

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer.run
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:attribute} _EXCLUDED_HEADERS
:canonical: nemo_eval.adapters.server._AdapterServer._EXCLUDED_HEADERS
:value: >
   ['content-encoding', 'content-length', 'transfer-encoding', 'connection']

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer._EXCLUDED_HEADERS
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:method} _process_response_headers(response: requests.Response) -> list[tuple[str, str]]
:canonical: nemo_eval.adapters.server._AdapterServer._process_response_headers
:classmethod:

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer._process_response_headers
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:method} _handler(path: str) -> flask.Response
:canonical: nemo_eval.adapters.server._AdapterServer._handler

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer._handler
:parser: docs.autodoc2_docstrings_parser
```

````

````{py:method} _log_response_interceptor_error(interceptor: nemo_eval.adapters.interceptors.ResponseInterceptor, adapter_response: nemo_eval.adapters.interceptors.AdapterResponse, error: Exception) -> None
:canonical: nemo_eval.adapters.server._AdapterServer._log_response_interceptor_error

```{autodoc2-docstring} nemo_eval.adapters.server._AdapterServer._log_response_interceptor_error
:parser: docs.autodoc2_docstrings_parser
```

````

`````
